// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: public/broker/broker.proto

package ProtobufBroker

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	client "github.com/khcchiu/cw-sdk-go/proto/public/client"

	stream "github.com/khcchiu/cw-sdk-go/proto/public/stream"

	types "github.com/gogo/protobuf/types"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Error_Kind int32

const (
	Error_KIND_UNKNOWN           Error_Kind = 0
	Error_KIND_INTERNAL          Error_Kind = 1
	Error_KIND_TRANSIENT         Error_Kind = 2
	Error_KIND_ABORTED           Error_Kind = 3
	Error_KIND_IO                Error_Kind = 4
	Error_KIND_PERMISSION_DENIED Error_Kind = 5
	Error_KIND_INVALID_OPERATION Error_Kind = 6
	Error_KIND_INVALID_ARGUMENT  Error_Kind = 7
	Error_KIND_INVALID_REQUEST   Error_Kind = 8
)

var Error_Kind_name = map[int32]string{
	0: "KIND_UNKNOWN",
	1: "KIND_INTERNAL",
	2: "KIND_TRANSIENT",
	3: "KIND_ABORTED",
	4: "KIND_IO",
	5: "KIND_PERMISSION_DENIED",
	6: "KIND_INVALID_OPERATION",
	7: "KIND_INVALID_ARGUMENT",
	8: "KIND_INVALID_REQUEST",
}
var Error_Kind_value = map[string]int32{
	"KIND_UNKNOWN":           0,
	"KIND_INTERNAL":          1,
	"KIND_TRANSIENT":         2,
	"KIND_ABORTED":           3,
	"KIND_IO":                4,
	"KIND_PERMISSION_DENIED": 5,
	"KIND_INVALID_OPERATION": 6,
	"KIND_INVALID_ARGUMENT":  7,
	"KIND_INVALID_REQUEST":   8,
}

func (x Error_Kind) String() string {
	return proto.EnumName(Error_Kind_name, int32(x))
}
func (Error_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{20, 0}
}

// DEPRECATION WARNING this isn't used anymore in favor of ProtobufClient.ClientSessionMessage
type BrokerSessionMessage struct {
	// Types that are valid to be assigned to SessionConfig:
	//	*BrokerSessionMessage_Session_
	//	*BrokerSessionMessage_AnonymousTradingSession_
	SessionConfig        isBrokerSessionMessage_SessionConfig `protobuf_oneof:"SessionConfig"`
	MarketId             int64                                `protobuf:"varint,3,opt,name=marketId,proto3" json:"marketId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *BrokerSessionMessage) Reset()         { *m = BrokerSessionMessage{} }
func (m *BrokerSessionMessage) String() string { return proto.CompactTextString(m) }
func (*BrokerSessionMessage) ProtoMessage()    {}
func (*BrokerSessionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{0}
}
func (m *BrokerSessionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrokerSessionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrokerSessionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BrokerSessionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerSessionMessage.Merge(dst, src)
}
func (m *BrokerSessionMessage) XXX_Size() int {
	return m.Size()
}
func (m *BrokerSessionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerSessionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerSessionMessage proto.InternalMessageInfo

type isBrokerSessionMessage_SessionConfig interface {
	isBrokerSessionMessage_SessionConfig()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BrokerSessionMessage_Session_ struct {
	Session *BrokerSessionMessage_Session `protobuf:"bytes,1,opt,name=session,proto3,oneof"`
}
type BrokerSessionMessage_AnonymousTradingSession_ struct {
	AnonymousTradingSession *BrokerSessionMessage_AnonymousTradingSession `protobuf:"bytes,2,opt,name=anonymousTradingSession,proto3,oneof"`
}

func (*BrokerSessionMessage_Session_) isBrokerSessionMessage_SessionConfig()                 {}
func (*BrokerSessionMessage_AnonymousTradingSession_) isBrokerSessionMessage_SessionConfig() {}

func (m *BrokerSessionMessage) GetSessionConfig() isBrokerSessionMessage_SessionConfig {
	if m != nil {
		return m.SessionConfig
	}
	return nil
}

func (m *BrokerSessionMessage) GetSession() *BrokerSessionMessage_Session {
	if x, ok := m.GetSessionConfig().(*BrokerSessionMessage_Session_); ok {
		return x.Session
	}
	return nil
}

func (m *BrokerSessionMessage) GetAnonymousTradingSession() *BrokerSessionMessage_AnonymousTradingSession {
	if x, ok := m.GetSessionConfig().(*BrokerSessionMessage_AnonymousTradingSession_); ok {
		return x.AnonymousTradingSession
	}
	return nil
}

func (m *BrokerSessionMessage) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BrokerSessionMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BrokerSessionMessage_OneofMarshaler, _BrokerSessionMessage_OneofUnmarshaler, _BrokerSessionMessage_OneofSizer, []interface{}{
		(*BrokerSessionMessage_Session_)(nil),
		(*BrokerSessionMessage_AnonymousTradingSession_)(nil),
	}
}

func _BrokerSessionMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BrokerSessionMessage)
	// SessionConfig
	switch x := m.SessionConfig.(type) {
	case *BrokerSessionMessage_Session_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Session); err != nil {
			return err
		}
	case *BrokerSessionMessage_AnonymousTradingSession_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnonymousTradingSession); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BrokerSessionMessage.SessionConfig has unexpected type %T", x)
	}
	return nil
}

func _BrokerSessionMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BrokerSessionMessage)
	switch tag {
	case 1: // SessionConfig.session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BrokerSessionMessage_Session)
		err := b.DecodeMessage(msg)
		m.SessionConfig = &BrokerSessionMessage_Session_{msg}
		return true, err
	case 2: // SessionConfig.anonymousTradingSession
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BrokerSessionMessage_AnonymousTradingSession)
		err := b.DecodeMessage(msg)
		m.SessionConfig = &BrokerSessionMessage_AnonymousTradingSession_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BrokerSessionMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BrokerSessionMessage)
	// SessionConfig
	switch x := m.SessionConfig.(type) {
	case *BrokerSessionMessage_Session_:
		s := proto.Size(x.Session)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerSessionMessage_AnonymousTradingSession_:
		s := proto.Size(x.AnonymousTradingSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BrokerSessionMessage_Session struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Expires              int64    `protobuf:"varint,2,opt,name=expires,proto3" json:"expires,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	MfaToken             string   `protobuf:"bytes,4,opt,name=mfaToken,proto3" json:"mfaToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerSessionMessage_Session) Reset()         { *m = BrokerSessionMessage_Session{} }
func (m *BrokerSessionMessage_Session) String() string { return proto.CompactTextString(m) }
func (*BrokerSessionMessage_Session) ProtoMessage()    {}
func (*BrokerSessionMessage_Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{0, 0}
}
func (m *BrokerSessionMessage_Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrokerSessionMessage_Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrokerSessionMessage_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BrokerSessionMessage_Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerSessionMessage_Session.Merge(dst, src)
}
func (m *BrokerSessionMessage_Session) XXX_Size() int {
	return m.Size()
}
func (m *BrokerSessionMessage_Session) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerSessionMessage_Session.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerSessionMessage_Session proto.InternalMessageInfo

func (m *BrokerSessionMessage_Session) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *BrokerSessionMessage_Session) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *BrokerSessionMessage_Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BrokerSessionMessage_Session) GetMfaToken() string {
	if m != nil {
		return m.MfaToken
	}
	return ""
}

type BrokerSessionMessage_AnonymousTradingSession struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Expiration           int64    `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerSessionMessage_AnonymousTradingSession) Reset() {
	*m = BrokerSessionMessage_AnonymousTradingSession{}
}
func (m *BrokerSessionMessage_AnonymousTradingSession) String() string {
	return proto.CompactTextString(m)
}
func (*BrokerSessionMessage_AnonymousTradingSession) ProtoMessage() {}
func (*BrokerSessionMessage_AnonymousTradingSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{0, 1}
}
func (m *BrokerSessionMessage_AnonymousTradingSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrokerSessionMessage_AnonymousTradingSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrokerSessionMessage_AnonymousTradingSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BrokerSessionMessage_AnonymousTradingSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerSessionMessage_AnonymousTradingSession.Merge(dst, src)
}
func (m *BrokerSessionMessage_AnonymousTradingSession) XXX_Size() int {
	return m.Size()
}
func (m *BrokerSessionMessage_AnonymousTradingSession) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerSessionMessage_AnonymousTradingSession.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerSessionMessage_AnonymousTradingSession proto.InternalMessageInfo

func (m *BrokerSessionMessage_AnonymousTradingSession) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *BrokerSessionMessage_AnonymousTradingSession) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BrokerSessionMessage_AnonymousTradingSession) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type PlaceOrderRequest struct {
	Order                *PrivateOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	ClosingOrder         *PrivateOrder `protobuf:"bytes,3,opt,name=closingOrder,proto3" json:"closingOrder,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PlaceOrderRequest) Reset()         { *m = PlaceOrderRequest{} }
func (m *PlaceOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderRequest) ProtoMessage()    {}
func (*PlaceOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{1}
}
func (m *PlaceOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlaceOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderRequest.Merge(dst, src)
}
func (m *PlaceOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlaceOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderRequest proto.InternalMessageInfo

func (m *PlaceOrderRequest) GetOrder() *PrivateOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *PlaceOrderRequest) GetClosingOrder() *PrivateOrder {
	if m != nil {
		return m.ClosingOrder
	}
	return nil
}

type PlaceOrderResult struct {
	Order *PrivateOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// Deprecated
	OrderId              string   `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaceOrderResult) Reset()         { *m = PlaceOrderResult{} }
func (m *PlaceOrderResult) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderResult) ProtoMessage()    {}
func (*PlaceOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{2}
}
func (m *PlaceOrderResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceOrderResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceOrderResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlaceOrderResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderResult.Merge(dst, src)
}
func (m *PlaceOrderResult) XXX_Size() int {
	return m.Size()
}
func (m *PlaceOrderResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderResult.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderResult proto.InternalMessageInfo

func (m *PlaceOrderResult) GetOrder() *PrivateOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *PlaceOrderResult) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type CancelOrderRequest struct {
	OrderId              string   `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelOrderRequest) Reset()         { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()    {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{3}
}
func (m *CancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderRequest.Merge(dst, src)
}
func (m *CancelOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderRequest proto.InternalMessageInfo

func (m *CancelOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type CancelOrderResult struct {
	OrderId              string   `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelOrderResult) Reset()         { *m = CancelOrderResult{} }
func (m *CancelOrderResult) String() string { return proto.CompactTextString(m) }
func (*CancelOrderResult) ProtoMessage()    {}
func (*CancelOrderResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{4}
}
func (m *CancelOrderResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOrderResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOrderResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CancelOrderResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderResult.Merge(dst, src)
}
func (m *CancelOrderResult) XXX_Size() int {
	return m.Size()
}
func (m *CancelOrderResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderResult.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderResult proto.InternalMessageInfo

func (m *CancelOrderResult) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type ReplaceOrderRequest struct {
	OrderId                 string        `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Replacement             *PrivateOrder `protobuf:"bytes,2,opt,name=replacement,proto3" json:"replacement,omitempty"`
	ReplacementClosingOrder *PrivateOrder `protobuf:"bytes,3,opt,name=replacementClosingOrder,proto3" json:"replacementClosingOrder,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}      `json:"-"`
	XXX_unrecognized        []byte        `json:"-"`
	XXX_sizecache           int32         `json:"-"`
}

func (m *ReplaceOrderRequest) Reset()         { *m = ReplaceOrderRequest{} }
func (m *ReplaceOrderRequest) String() string { return proto.CompactTextString(m) }
func (*ReplaceOrderRequest) ProtoMessage()    {}
func (*ReplaceOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{5}
}
func (m *ReplaceOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ReplaceOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceOrderRequest.Merge(dst, src)
}
func (m *ReplaceOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceOrderRequest proto.InternalMessageInfo

func (m *ReplaceOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ReplaceOrderRequest) GetReplacement() *PrivateOrder {
	if m != nil {
		return m.Replacement
	}
	return nil
}

func (m *ReplaceOrderRequest) GetReplacementClosingOrder() *PrivateOrder {
	if m != nil {
		return m.ReplacementClosingOrder
	}
	return nil
}

type ClosePositionRequest struct {
	PositionId           string   `protobuf:"bytes,2,opt,name=positionId,proto3" json:"positionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClosePositionRequest) Reset()         { *m = ClosePositionRequest{} }
func (m *ClosePositionRequest) String() string { return proto.CompactTextString(m) }
func (*ClosePositionRequest) ProtoMessage()    {}
func (*ClosePositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{6}
}
func (m *ClosePositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosePositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClosePositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClosePositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosePositionRequest.Merge(dst, src)
}
func (m *ClosePositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClosePositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosePositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClosePositionRequest proto.InternalMessageInfo

func (m *ClosePositionRequest) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type SettlePositionRequest struct {
	PositionId           string   `protobuf:"bytes,1,opt,name=positionId,proto3" json:"positionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettlePositionRequest) Reset()         { *m = SettlePositionRequest{} }
func (m *SettlePositionRequest) String() string { return proto.CompactTextString(m) }
func (*SettlePositionRequest) ProtoMessage()    {}
func (*SettlePositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{7}
}
func (m *SettlePositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettlePositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettlePositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SettlePositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlePositionRequest.Merge(dst, src)
}
func (m *SettlePositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SettlePositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlePositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SettlePositionRequest proto.InternalMessageInfo

func (m *SettlePositionRequest) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type SyncRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{8}
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(dst, src)
}
func (m *SyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

type BrokerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// marketId can be 0 if there is just one session associated with the
	// connection.
	MarketId int64 `protobuf:"varint,7,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*BrokerRequest_PlaceOrderRequest
	//	*BrokerRequest_CancelOrderRequest
	//	*BrokerRequest_ReplaceOrderRequest
	//	*BrokerRequest_SyncRequest
	//	*BrokerRequest_ClosePositionRequest
	//	*BrokerRequest_SettlePositionRequest
	Request              isBrokerRequest_Request `protobuf_oneof:"Request"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BrokerRequest) Reset()         { *m = BrokerRequest{} }
func (m *BrokerRequest) String() string { return proto.CompactTextString(m) }
func (*BrokerRequest) ProtoMessage()    {}
func (*BrokerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{9}
}
func (m *BrokerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrokerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrokerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BrokerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerRequest.Merge(dst, src)
}
func (m *BrokerRequest) XXX_Size() int {
	return m.Size()
}
func (m *BrokerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerRequest proto.InternalMessageInfo

type isBrokerRequest_Request interface {
	isBrokerRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BrokerRequest_PlaceOrderRequest struct {
	PlaceOrderRequest *PlaceOrderRequest `protobuf:"bytes,2,opt,name=placeOrderRequest,proto3,oneof"`
}
type BrokerRequest_CancelOrderRequest struct {
	CancelOrderRequest *CancelOrderRequest `protobuf:"bytes,3,opt,name=cancelOrderRequest,proto3,oneof"`
}
type BrokerRequest_ReplaceOrderRequest struct {
	ReplaceOrderRequest *ReplaceOrderRequest `protobuf:"bytes,6,opt,name=replaceOrderRequest,proto3,oneof"`
}
type BrokerRequest_SyncRequest struct {
	SyncRequest *SyncRequest `protobuf:"bytes,4,opt,name=syncRequest,proto3,oneof"`
}
type BrokerRequest_ClosePositionRequest struct {
	ClosePositionRequest *ClosePositionRequest `protobuf:"bytes,5,opt,name=closePositionRequest,proto3,oneof"`
}
type BrokerRequest_SettlePositionRequest struct {
	SettlePositionRequest *SettlePositionRequest `protobuf:"bytes,9,opt,name=settlePositionRequest,proto3,oneof"`
}

func (*BrokerRequest_PlaceOrderRequest) isBrokerRequest_Request()     {}
func (*BrokerRequest_CancelOrderRequest) isBrokerRequest_Request()    {}
func (*BrokerRequest_ReplaceOrderRequest) isBrokerRequest_Request()   {}
func (*BrokerRequest_SyncRequest) isBrokerRequest_Request()           {}
func (*BrokerRequest_ClosePositionRequest) isBrokerRequest_Request()  {}
func (*BrokerRequest_SettlePositionRequest) isBrokerRequest_Request() {}

func (m *BrokerRequest) GetRequest() isBrokerRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BrokerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BrokerRequest) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *BrokerRequest) GetPlaceOrderRequest() *PlaceOrderRequest {
	if x, ok := m.GetRequest().(*BrokerRequest_PlaceOrderRequest); ok {
		return x.PlaceOrderRequest
	}
	return nil
}

func (m *BrokerRequest) GetCancelOrderRequest() *CancelOrderRequest {
	if x, ok := m.GetRequest().(*BrokerRequest_CancelOrderRequest); ok {
		return x.CancelOrderRequest
	}
	return nil
}

func (m *BrokerRequest) GetReplaceOrderRequest() *ReplaceOrderRequest {
	if x, ok := m.GetRequest().(*BrokerRequest_ReplaceOrderRequest); ok {
		return x.ReplaceOrderRequest
	}
	return nil
}

func (m *BrokerRequest) GetSyncRequest() *SyncRequest {
	if x, ok := m.GetRequest().(*BrokerRequest_SyncRequest); ok {
		return x.SyncRequest
	}
	return nil
}

func (m *BrokerRequest) GetClosePositionRequest() *ClosePositionRequest {
	if x, ok := m.GetRequest().(*BrokerRequest_ClosePositionRequest); ok {
		return x.ClosePositionRequest
	}
	return nil
}

func (m *BrokerRequest) GetSettlePositionRequest() *SettlePositionRequest {
	if x, ok := m.GetRequest().(*BrokerRequest_SettlePositionRequest); ok {
		return x.SettlePositionRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BrokerRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BrokerRequest_OneofMarshaler, _BrokerRequest_OneofUnmarshaler, _BrokerRequest_OneofSizer, []interface{}{
		(*BrokerRequest_PlaceOrderRequest)(nil),
		(*BrokerRequest_CancelOrderRequest)(nil),
		(*BrokerRequest_ReplaceOrderRequest)(nil),
		(*BrokerRequest_SyncRequest)(nil),
		(*BrokerRequest_ClosePositionRequest)(nil),
		(*BrokerRequest_SettlePositionRequest)(nil),
	}
}

func _BrokerRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BrokerRequest)
	// Request
	switch x := m.Request.(type) {
	case *BrokerRequest_PlaceOrderRequest:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlaceOrderRequest); err != nil {
			return err
		}
	case *BrokerRequest_CancelOrderRequest:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CancelOrderRequest); err != nil {
			return err
		}
	case *BrokerRequest_ReplaceOrderRequest:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplaceOrderRequest); err != nil {
			return err
		}
	case *BrokerRequest_SyncRequest:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SyncRequest); err != nil {
			return err
		}
	case *BrokerRequest_ClosePositionRequest:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClosePositionRequest); err != nil {
			return err
		}
	case *BrokerRequest_SettlePositionRequest:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SettlePositionRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BrokerRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _BrokerRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BrokerRequest)
	switch tag {
	case 2: // Request.placeOrderRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlaceOrderRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BrokerRequest_PlaceOrderRequest{msg}
		return true, err
	case 3: // Request.cancelOrderRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CancelOrderRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BrokerRequest_CancelOrderRequest{msg}
		return true, err
	case 6: // Request.replaceOrderRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplaceOrderRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BrokerRequest_ReplaceOrderRequest{msg}
		return true, err
	case 4: // Request.syncRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SyncRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BrokerRequest_SyncRequest{msg}
		return true, err
	case 5: // Request.closePositionRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClosePositionRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BrokerRequest_ClosePositionRequest{msg}
		return true, err
	case 9: // Request.settlePositionRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SettlePositionRequest)
		err := b.DecodeMessage(msg)
		m.Request = &BrokerRequest_SettlePositionRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BrokerRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BrokerRequest)
	// Request
	switch x := m.Request.(type) {
	case *BrokerRequest_PlaceOrderRequest:
		s := proto.Size(x.PlaceOrderRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerRequest_CancelOrderRequest:
		s := proto.Size(x.CancelOrderRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerRequest_ReplaceOrderRequest:
		s := proto.Size(x.ReplaceOrderRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerRequest_SyncRequest:
		s := proto.Size(x.SyncRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerRequest_ClosePositionRequest:
		s := proto.Size(x.ClosePositionRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerRequest_SettlePositionRequest:
		s := proto.Size(x.SettlePositionRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OrdersUpdate struct {
	Orders               []*PrivateOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OrdersUpdate) Reset()         { *m = OrdersUpdate{} }
func (m *OrdersUpdate) String() string { return proto.CompactTextString(m) }
func (*OrdersUpdate) ProtoMessage()    {}
func (*OrdersUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{10}
}
func (m *OrdersUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrdersUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrdersUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OrdersUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersUpdate.Merge(dst, src)
}
func (m *OrdersUpdate) XXX_Size() int {
	return m.Size()
}
func (m *OrdersUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersUpdate proto.InternalMessageInfo

func (m *OrdersUpdate) GetOrders() []*PrivateOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type TradesUpdate struct {
	Trades               []*PrivateTrade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TradesUpdate) Reset()         { *m = TradesUpdate{} }
func (m *TradesUpdate) String() string { return proto.CompactTextString(m) }
func (*TradesUpdate) ProtoMessage()    {}
func (*TradesUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{11}
}
func (m *TradesUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradesUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradesUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TradesUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesUpdate.Merge(dst, src)
}
func (m *TradesUpdate) XXX_Size() int {
	return m.Size()
}
func (m *TradesUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TradesUpdate proto.InternalMessageInfo

func (m *TradesUpdate) GetTrades() []*PrivateTrade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type PositionsUpdate struct {
	Positions            []*PrivatePosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PositionsUpdate) Reset()         { *m = PositionsUpdate{} }
func (m *PositionsUpdate) String() string { return proto.CompactTextString(m) }
func (*PositionsUpdate) ProtoMessage()    {}
func (*PositionsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{12}
}
func (m *PositionsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PositionsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsUpdate.Merge(dst, src)
}
func (m *PositionsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PositionsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsUpdate proto.InternalMessageInfo

func (m *PositionsUpdate) GetPositions() []*PrivatePosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

type BalancesUpdate struct {
	// This field represents available balances, this was the
	// default until we introduced the ability to split between
	// total and available balances.
	Balances []*Balances `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	// This field contains total balances only.
	Total                []*Balances `protobuf:"bytes,2,rep,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BalancesUpdate) Reset()         { *m = BalancesUpdate{} }
func (m *BalancesUpdate) String() string { return proto.CompactTextString(m) }
func (*BalancesUpdate) ProtoMessage()    {}
func (*BalancesUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{13}
}
func (m *BalancesUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancesUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancesUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BalancesUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancesUpdate.Merge(dst, src)
}
func (m *BalancesUpdate) XXX_Size() int {
	return m.Size()
}
func (m *BalancesUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancesUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_BalancesUpdate proto.InternalMessageInfo

func (m *BalancesUpdate) GetBalances() []*Balances {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *BalancesUpdate) GetTotal() []*Balances {
	if m != nil {
		return m.Total
	}
	return nil
}

type RequestResolutionUpdate struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error   int32  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ErrorV2 *Error `protobuf:"bytes,6,opt,name=errorV2,proto3" json:"errorV2,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*RequestResolutionUpdate_PlaceOrderResult
	//	*RequestResolutionUpdate_CancelOrderResult
	Result               isRequestResolutionUpdate_Result `protobuf_oneof:"Result"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *RequestResolutionUpdate) Reset()         { *m = RequestResolutionUpdate{} }
func (m *RequestResolutionUpdate) String() string { return proto.CompactTextString(m) }
func (*RequestResolutionUpdate) ProtoMessage()    {}
func (*RequestResolutionUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{14}
}
func (m *RequestResolutionUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestResolutionUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestResolutionUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestResolutionUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestResolutionUpdate.Merge(dst, src)
}
func (m *RequestResolutionUpdate) XXX_Size() int {
	return m.Size()
}
func (m *RequestResolutionUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestResolutionUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_RequestResolutionUpdate proto.InternalMessageInfo

type isRequestResolutionUpdate_Result interface {
	isRequestResolutionUpdate_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestResolutionUpdate_PlaceOrderResult struct {
	PlaceOrderResult *PlaceOrderResult `protobuf:"bytes,4,opt,name=placeOrderResult,proto3,oneof"`
}
type RequestResolutionUpdate_CancelOrderResult struct {
	CancelOrderResult *CancelOrderResult `protobuf:"bytes,5,opt,name=cancelOrderResult,proto3,oneof"`
}

func (*RequestResolutionUpdate_PlaceOrderResult) isRequestResolutionUpdate_Result()  {}
func (*RequestResolutionUpdate_CancelOrderResult) isRequestResolutionUpdate_Result() {}

func (m *RequestResolutionUpdate) GetResult() isRequestResolutionUpdate_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RequestResolutionUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestResolutionUpdate) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *RequestResolutionUpdate) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RequestResolutionUpdate) GetErrorV2() *Error {
	if m != nil {
		return m.ErrorV2
	}
	return nil
}

func (m *RequestResolutionUpdate) GetPlaceOrderResult() *PlaceOrderResult {
	if x, ok := m.GetResult().(*RequestResolutionUpdate_PlaceOrderResult); ok {
		return x.PlaceOrderResult
	}
	return nil
}

func (m *RequestResolutionUpdate) GetCancelOrderResult() *CancelOrderResult {
	if x, ok := m.GetResult().(*RequestResolutionUpdate_CancelOrderResult); ok {
		return x.CancelOrderResult
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestResolutionUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestResolutionUpdate_OneofMarshaler, _RequestResolutionUpdate_OneofUnmarshaler, _RequestResolutionUpdate_OneofSizer, []interface{}{
		(*RequestResolutionUpdate_PlaceOrderResult)(nil),
		(*RequestResolutionUpdate_CancelOrderResult)(nil),
	}
}

func _RequestResolutionUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestResolutionUpdate)
	// Result
	switch x := m.Result.(type) {
	case *RequestResolutionUpdate_PlaceOrderResult:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlaceOrderResult); err != nil {
			return err
		}
	case *RequestResolutionUpdate_CancelOrderResult:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CancelOrderResult); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RequestResolutionUpdate.Result has unexpected type %T", x)
	}
	return nil
}

func _RequestResolutionUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestResolutionUpdate)
	switch tag {
	case 4: // Result.placeOrderResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlaceOrderResult)
		err := b.DecodeMessage(msg)
		m.Result = &RequestResolutionUpdate_PlaceOrderResult{msg}
		return true, err
	case 5: // Result.cancelOrderResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CancelOrderResult)
		err := b.DecodeMessage(msg)
		m.Result = &RequestResolutionUpdate_CancelOrderResult{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RequestResolutionUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestResolutionUpdate)
	// Result
	switch x := m.Result.(type) {
	case *RequestResolutionUpdate_PlaceOrderResult:
		s := proto.Size(x.PlaceOrderResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestResolutionUpdate_CancelOrderResult:
		s := proto.Size(x.CancelOrderResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AnonymousSessionStatusUpdate struct {
	Expiration           int64    `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnonymousSessionStatusUpdate) Reset()         { *m = AnonymousSessionStatusUpdate{} }
func (m *AnonymousSessionStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*AnonymousSessionStatusUpdate) ProtoMessage()    {}
func (*AnonymousSessionStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{15}
}
func (m *AnonymousSessionStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymousSessionStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnonymousSessionStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnonymousSessionStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymousSessionStatusUpdate.Merge(dst, src)
}
func (m *AnonymousSessionStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AnonymousSessionStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymousSessionStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymousSessionStatusUpdate proto.InternalMessageInfo

func (m *AnonymousSessionStatusUpdate) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *AnonymousSessionStatusUpdate) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SessionStatusUpdate struct {
	Initialized bool `protobuf:"varint,1,opt,name=initialized,proto3" json:"initialized,omitempty"`
	// Syncing means poller is running
	Syncing bool `protobuf:"varint,2,opt,name=syncing,proto3" json:"syncing,omitempty"`
	// Last sync is last time poller finished running
	LastSyncTime int64 `protobuf:"varint,3,opt,name=lastSyncTime,proto3" json:"lastSyncTime,omitempty"`
	// Expose error from poller
	SyncError            int32    `protobuf:"varint,4,opt,name=syncError,proto3" json:"syncError,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionStatusUpdate) Reset()         { *m = SessionStatusUpdate{} }
func (m *SessionStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*SessionStatusUpdate) ProtoMessage()    {}
func (*SessionStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{16}
}
func (m *SessionStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStatusUpdate.Merge(dst, src)
}
func (m *SessionStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *SessionStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStatusUpdate proto.InternalMessageInfo

func (m *SessionStatusUpdate) GetInitialized() bool {
	if m != nil {
		return m.Initialized
	}
	return false
}

func (m *SessionStatusUpdate) GetSyncing() bool {
	if m != nil {
		return m.Syncing
	}
	return false
}

func (m *SessionStatusUpdate) GetLastSyncTime() int64 {
	if m != nil {
		return m.LastSyncTime
	}
	return 0
}

func (m *SessionStatusUpdate) GetSyncError() int32 {
	if m != nil {
		return m.SyncError
	}
	return 0
}

type PermissionsUpdate struct {
	OrderTypes           []PrivateOrder_Type               `protobuf:"varint,1,rep,name=orderTypes,proto3,enum=ProtobufBroker.PrivateOrder_Type" json:"orderTypes,omitempty"`
	FundingTypes         []FundingType                     `protobuf:"varint,2,rep,name=fundingTypes,proto3,enum=ProtobufBroker.FundingType" json:"fundingTypes,omitempty"`
	Agreements           []*PermissionsUpdate_Agreement    `protobuf:"bytes,4,rep,name=agreements,proto3" json:"agreements,omitempty"`
	LeverageLevels       *PermissionsUpdate_LeverageLevels `protobuf:"bytes,6,opt,name=leverageLevels,proto3" json:"leverageLevels,omitempty"`
	SupportsOrderExpiry  bool                              `protobuf:"varint,7,opt,name=supportsOrderExpiry,proto3" json:"supportsOrderExpiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PermissionsUpdate) Reset()         { *m = PermissionsUpdate{} }
func (m *PermissionsUpdate) String() string { return proto.CompactTextString(m) }
func (*PermissionsUpdate) ProtoMessage()    {}
func (*PermissionsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{17}
}
func (m *PermissionsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PermissionsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionsUpdate.Merge(dst, src)
}
func (m *PermissionsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PermissionsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionsUpdate proto.InternalMessageInfo

func (m *PermissionsUpdate) GetOrderTypes() []PrivateOrder_Type {
	if m != nil {
		return m.OrderTypes
	}
	return nil
}

func (m *PermissionsUpdate) GetFundingTypes() []FundingType {
	if m != nil {
		return m.FundingTypes
	}
	return nil
}

func (m *PermissionsUpdate) GetAgreements() []*PermissionsUpdate_Agreement {
	if m != nil {
		return m.Agreements
	}
	return nil
}

func (m *PermissionsUpdate) GetLeverageLevels() *PermissionsUpdate_LeverageLevels {
	if m != nil {
		return m.LeverageLevels
	}
	return nil
}

func (m *PermissionsUpdate) GetSupportsOrderExpiry() bool {
	if m != nil {
		return m.SupportsOrderExpiry
	}
	return false
}

type PermissionsUpdate_Agreement struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Body                 string   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PermissionsUpdate_Agreement) Reset()         { *m = PermissionsUpdate_Agreement{} }
func (m *PermissionsUpdate_Agreement) String() string { return proto.CompactTextString(m) }
func (*PermissionsUpdate_Agreement) ProtoMessage()    {}
func (*PermissionsUpdate_Agreement) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{17, 0}
}
func (m *PermissionsUpdate_Agreement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionsUpdate_Agreement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionsUpdate_Agreement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PermissionsUpdate_Agreement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionsUpdate_Agreement.Merge(dst, src)
}
func (m *PermissionsUpdate_Agreement) XXX_Size() int {
	return m.Size()
}
func (m *PermissionsUpdate_Agreement) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionsUpdate_Agreement.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionsUpdate_Agreement proto.InternalMessageInfo

func (m *PermissionsUpdate_Agreement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PermissionsUpdate_Agreement) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type PermissionsUpdate_LeverageLevels struct {
	Buy                  []string `protobuf:"bytes,1,rep,name=buy,proto3" json:"buy,omitempty"`
	Sell                 []string `protobuf:"bytes,2,rep,name=sell,proto3" json:"sell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PermissionsUpdate_LeverageLevels) Reset()         { *m = PermissionsUpdate_LeverageLevels{} }
func (m *PermissionsUpdate_LeverageLevels) String() string { return proto.CompactTextString(m) }
func (*PermissionsUpdate_LeverageLevels) ProtoMessage()    {}
func (*PermissionsUpdate_LeverageLevels) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{17, 1}
}
func (m *PermissionsUpdate_LeverageLevels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionsUpdate_LeverageLevels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionsUpdate_LeverageLevels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PermissionsUpdate_LeverageLevels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionsUpdate_LeverageLevels.Merge(dst, src)
}
func (m *PermissionsUpdate_LeverageLevels) XXX_Size() int {
	return m.Size()
}
func (m *PermissionsUpdate_LeverageLevels) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionsUpdate_LeverageLevels.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionsUpdate_LeverageLevels proto.InternalMessageInfo

func (m *PermissionsUpdate_LeverageLevels) GetBuy() []string {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *PermissionsUpdate_LeverageLevels) GetSell() []string {
	if m != nil {
		return m.Sell
	}
	return nil
}

type APIAccessorStatusUpdate struct {
	HasAccess            bool     `protobuf:"varint,1,opt,name=hasAccess,proto3" json:"hasAccess,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusString         string   `protobuf:"bytes,3,opt,name=statusString,proto3" json:"statusString,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIAccessorStatusUpdate) Reset()         { *m = APIAccessorStatusUpdate{} }
func (m *APIAccessorStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*APIAccessorStatusUpdate) ProtoMessage()    {}
func (*APIAccessorStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{18}
}
func (m *APIAccessorStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIAccessorStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIAccessorStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *APIAccessorStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIAccessorStatusUpdate.Merge(dst, src)
}
func (m *APIAccessorStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *APIAccessorStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_APIAccessorStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_APIAccessorStatusUpdate proto.InternalMessageInfo

func (m *APIAccessorStatusUpdate) GetHasAccess() bool {
	if m != nil {
		return m.HasAccess
	}
	return false
}

func (m *APIAccessorStatusUpdate) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *APIAccessorStatusUpdate) GetStatusString() string {
	if m != nil {
		return m.StatusString
	}
	return ""
}

type BrokerUpdateMessage struct {
	MarketId int64 `protobuf:"varint,11,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*BrokerUpdateMessage_OrdersUpdate
	//	*BrokerUpdateMessage_TradesUpdate
	//	*BrokerUpdateMessage_BalancesUpdate
	//	*BrokerUpdateMessage_PositionsUpdate
	//	*BrokerUpdateMessage_RequestResolutionUpdate
	//	*BrokerUpdateMessage_AnonymousSessionStatusUpdate
	//	*BrokerUpdateMessage_PermissionsUpdate
	//	*BrokerUpdateMessage_SessionStatusUpdate
	//	*BrokerUpdateMessage_ApiAccessorStatusUpdate
	//	*BrokerUpdateMessage_AuthenticationResult
	//	*BrokerUpdateMessage_SubscriptionResult
	//	*BrokerUpdateMessage_WebAuthenticationResult
	Update               isBrokerUpdateMessage_Update `protobuf_oneof:"Update"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *BrokerUpdateMessage) Reset()         { *m = BrokerUpdateMessage{} }
func (m *BrokerUpdateMessage) String() string { return proto.CompactTextString(m) }
func (*BrokerUpdateMessage) ProtoMessage()    {}
func (*BrokerUpdateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{19}
}
func (m *BrokerUpdateMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrokerUpdateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrokerUpdateMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BrokerUpdateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerUpdateMessage.Merge(dst, src)
}
func (m *BrokerUpdateMessage) XXX_Size() int {
	return m.Size()
}
func (m *BrokerUpdateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerUpdateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerUpdateMessage proto.InternalMessageInfo

type isBrokerUpdateMessage_Update interface {
	isBrokerUpdateMessage_Update()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BrokerUpdateMessage_OrdersUpdate struct {
	OrdersUpdate *OrdersUpdate `protobuf:"bytes,1,opt,name=ordersUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_TradesUpdate struct {
	TradesUpdate *TradesUpdate `protobuf:"bytes,2,opt,name=tradesUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_BalancesUpdate struct {
	BalancesUpdate *BalancesUpdate `protobuf:"bytes,3,opt,name=balancesUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_PositionsUpdate struct {
	PositionsUpdate *PositionsUpdate `protobuf:"bytes,8,opt,name=positionsUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_RequestResolutionUpdate struct {
	RequestResolutionUpdate *RequestResolutionUpdate `protobuf:"bytes,4,opt,name=requestResolutionUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_AnonymousSessionStatusUpdate struct {
	AnonymousSessionStatusUpdate *AnonymousSessionStatusUpdate `protobuf:"bytes,5,opt,name=anonymousSessionStatusUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_PermissionsUpdate struct {
	PermissionsUpdate *PermissionsUpdate `protobuf:"bytes,6,opt,name=permissionsUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_SessionStatusUpdate struct {
	SessionStatusUpdate *SessionStatusUpdate `protobuf:"bytes,7,opt,name=sessionStatusUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_ApiAccessorStatusUpdate struct {
	ApiAccessorStatusUpdate *APIAccessorStatusUpdate `protobuf:"bytes,9,opt,name=apiAccessorStatusUpdate,proto3,oneof"`
}
type BrokerUpdateMessage_AuthenticationResult struct {
	AuthenticationResult *stream.AuthenticationResult `protobuf:"bytes,10,opt,name=authenticationResult,proto3,oneof"`
}
type BrokerUpdateMessage_SubscriptionResult struct {
	SubscriptionResult *stream.SubscriptionResult `protobuf:"bytes,12,opt,name=subscriptionResult,proto3,oneof"`
}
type BrokerUpdateMessage_WebAuthenticationResult struct {
	WebAuthenticationResult *client.WebAuthenticationResult `protobuf:"bytes,14,opt,name=webAuthenticationResult,proto3,oneof"`
}

func (*BrokerUpdateMessage_OrdersUpdate) isBrokerUpdateMessage_Update()                 {}
func (*BrokerUpdateMessage_TradesUpdate) isBrokerUpdateMessage_Update()                 {}
func (*BrokerUpdateMessage_BalancesUpdate) isBrokerUpdateMessage_Update()               {}
func (*BrokerUpdateMessage_PositionsUpdate) isBrokerUpdateMessage_Update()              {}
func (*BrokerUpdateMessage_RequestResolutionUpdate) isBrokerUpdateMessage_Update()      {}
func (*BrokerUpdateMessage_AnonymousSessionStatusUpdate) isBrokerUpdateMessage_Update() {}
func (*BrokerUpdateMessage_PermissionsUpdate) isBrokerUpdateMessage_Update()            {}
func (*BrokerUpdateMessage_SessionStatusUpdate) isBrokerUpdateMessage_Update()          {}
func (*BrokerUpdateMessage_ApiAccessorStatusUpdate) isBrokerUpdateMessage_Update()      {}
func (*BrokerUpdateMessage_AuthenticationResult) isBrokerUpdateMessage_Update()         {}
func (*BrokerUpdateMessage_SubscriptionResult) isBrokerUpdateMessage_Update()           {}
func (*BrokerUpdateMessage_WebAuthenticationResult) isBrokerUpdateMessage_Update()      {}

func (m *BrokerUpdateMessage) GetUpdate() isBrokerUpdateMessage_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *BrokerUpdateMessage) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *BrokerUpdateMessage) GetOrdersUpdate() *OrdersUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_OrdersUpdate); ok {
		return x.OrdersUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetTradesUpdate() *TradesUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_TradesUpdate); ok {
		return x.TradesUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetBalancesUpdate() *BalancesUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_BalancesUpdate); ok {
		return x.BalancesUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetPositionsUpdate() *PositionsUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_PositionsUpdate); ok {
		return x.PositionsUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetRequestResolutionUpdate() *RequestResolutionUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_RequestResolutionUpdate); ok {
		return x.RequestResolutionUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetAnonymousSessionStatusUpdate() *AnonymousSessionStatusUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_AnonymousSessionStatusUpdate); ok {
		return x.AnonymousSessionStatusUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetPermissionsUpdate() *PermissionsUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_PermissionsUpdate); ok {
		return x.PermissionsUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetSessionStatusUpdate() *SessionStatusUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_SessionStatusUpdate); ok {
		return x.SessionStatusUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetApiAccessorStatusUpdate() *APIAccessorStatusUpdate {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_ApiAccessorStatusUpdate); ok {
		return x.ApiAccessorStatusUpdate
	}
	return nil
}

func (m *BrokerUpdateMessage) GetAuthenticationResult() *stream.AuthenticationResult {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_AuthenticationResult); ok {
		return x.AuthenticationResult
	}
	return nil
}

func (m *BrokerUpdateMessage) GetSubscriptionResult() *stream.SubscriptionResult {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_SubscriptionResult); ok {
		return x.SubscriptionResult
	}
	return nil
}

func (m *BrokerUpdateMessage) GetWebAuthenticationResult() *client.WebAuthenticationResult {
	if x, ok := m.GetUpdate().(*BrokerUpdateMessage_WebAuthenticationResult); ok {
		return x.WebAuthenticationResult
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BrokerUpdateMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BrokerUpdateMessage_OneofMarshaler, _BrokerUpdateMessage_OneofUnmarshaler, _BrokerUpdateMessage_OneofSizer, []interface{}{
		(*BrokerUpdateMessage_OrdersUpdate)(nil),
		(*BrokerUpdateMessage_TradesUpdate)(nil),
		(*BrokerUpdateMessage_BalancesUpdate)(nil),
		(*BrokerUpdateMessage_PositionsUpdate)(nil),
		(*BrokerUpdateMessage_RequestResolutionUpdate)(nil),
		(*BrokerUpdateMessage_AnonymousSessionStatusUpdate)(nil),
		(*BrokerUpdateMessage_PermissionsUpdate)(nil),
		(*BrokerUpdateMessage_SessionStatusUpdate)(nil),
		(*BrokerUpdateMessage_ApiAccessorStatusUpdate)(nil),
		(*BrokerUpdateMessage_AuthenticationResult)(nil),
		(*BrokerUpdateMessage_SubscriptionResult)(nil),
		(*BrokerUpdateMessage_WebAuthenticationResult)(nil),
	}
}

func _BrokerUpdateMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BrokerUpdateMessage)
	// Update
	switch x := m.Update.(type) {
	case *BrokerUpdateMessage_OrdersUpdate:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OrdersUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_TradesUpdate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TradesUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_BalancesUpdate:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BalancesUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_PositionsUpdate:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositionsUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_RequestResolutionUpdate:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestResolutionUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_AnonymousSessionStatusUpdate:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnonymousSessionStatusUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_PermissionsUpdate:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PermissionsUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_SessionStatusUpdate:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionStatusUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_ApiAccessorStatusUpdate:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiAccessorStatusUpdate); err != nil {
			return err
		}
	case *BrokerUpdateMessage_AuthenticationResult:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AuthenticationResult); err != nil {
			return err
		}
	case *BrokerUpdateMessage_SubscriptionResult:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubscriptionResult); err != nil {
			return err
		}
	case *BrokerUpdateMessage_WebAuthenticationResult:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WebAuthenticationResult); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BrokerUpdateMessage.Update has unexpected type %T", x)
	}
	return nil
}

func _BrokerUpdateMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BrokerUpdateMessage)
	switch tag {
	case 1: // Update.ordersUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrdersUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_OrdersUpdate{msg}
		return true, err
	case 2: // Update.tradesUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradesUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_TradesUpdate{msg}
		return true, err
	case 3: // Update.balancesUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BalancesUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_BalancesUpdate{msg}
		return true, err
	case 8: // Update.positionsUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositionsUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_PositionsUpdate{msg}
		return true, err
	case 4: // Update.requestResolutionUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestResolutionUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_RequestResolutionUpdate{msg}
		return true, err
	case 5: // Update.anonymousSessionStatusUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AnonymousSessionStatusUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_AnonymousSessionStatusUpdate{msg}
		return true, err
	case 6: // Update.permissionsUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PermissionsUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_PermissionsUpdate{msg}
		return true, err
	case 7: // Update.sessionStatusUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionStatusUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_SessionStatusUpdate{msg}
		return true, err
	case 9: // Update.apiAccessorStatusUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APIAccessorStatusUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_ApiAccessorStatusUpdate{msg}
		return true, err
	case 10: // Update.authenticationResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(stream.AuthenticationResult)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_AuthenticationResult{msg}
		return true, err
	case 12: // Update.subscriptionResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(stream.SubscriptionResult)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_SubscriptionResult{msg}
		return true, err
	case 14: // Update.webAuthenticationResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(client.WebAuthenticationResult)
		err := b.DecodeMessage(msg)
		m.Update = &BrokerUpdateMessage_WebAuthenticationResult{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BrokerUpdateMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BrokerUpdateMessage)
	// Update
	switch x := m.Update.(type) {
	case *BrokerUpdateMessage_OrdersUpdate:
		s := proto.Size(x.OrdersUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_TradesUpdate:
		s := proto.Size(x.TradesUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_BalancesUpdate:
		s := proto.Size(x.BalancesUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_PositionsUpdate:
		s := proto.Size(x.PositionsUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_RequestResolutionUpdate:
		s := proto.Size(x.RequestResolutionUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_AnonymousSessionStatusUpdate:
		s := proto.Size(x.AnonymousSessionStatusUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_PermissionsUpdate:
		s := proto.Size(x.PermissionsUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_SessionStatusUpdate:
		s := proto.Size(x.SessionStatusUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_ApiAccessorStatusUpdate:
		s := proto.Size(x.ApiAccessorStatusUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_AuthenticationResult:
		s := proto.Size(x.AuthenticationResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_SubscriptionResult:
		s := proto.Size(x.SubscriptionResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BrokerUpdateMessage_WebAuthenticationResult:
		s := proto.Size(x.WebAuthenticationResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Copied from cryptowatch/outer/resource/broker/v1
type Error struct {
	// Kind is generalized code.
	Kind Error_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=ProtobufBroker.Error_Kind" json:"kind,omitempty"`
	// Code is an identifier that represents error produced by an external service for example by an exchange, unified into the common form.
	// It has simple uint64 representation so that there is no need to rebuild frontend/update client library every time an exchange introduce a new error.
	// The set of values is changing constantly and are out of control of Cryptowatch.
	// For in-depth information about the original error that exchange sent, inspect details for OriginalErrorDetails.
	Code uint64 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// Message is a developer-facing human-readable error message in English. It should
	// both explain the error and offer an actionable resolution to it.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Details are an additional error information that the client code can use to handle the error.
	// It may contains information about particular fields that were filled in the wrong way,
	// how much request quota is left or what was the exact response from the exchange.
	//
	// LINK: https://godoc.org/google.golang.org/genproto/googleapis/rpc/errdetails
	Details              []*types.Any `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_15be0079423cc074, []int{20}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetKind() Error_Kind {
	if m != nil {
		return m.Kind
	}
	return Error_KIND_UNKNOWN
}

func (m *Error) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetDetails() []*types.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*BrokerSessionMessage)(nil), "ProtobufBroker.BrokerSessionMessage")
	proto.RegisterType((*BrokerSessionMessage_Session)(nil), "ProtobufBroker.BrokerSessionMessage.Session")
	proto.RegisterType((*BrokerSessionMessage_AnonymousTradingSession)(nil), "ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession")
	proto.RegisterType((*PlaceOrderRequest)(nil), "ProtobufBroker.PlaceOrderRequest")
	proto.RegisterType((*PlaceOrderResult)(nil), "ProtobufBroker.PlaceOrderResult")
	proto.RegisterType((*CancelOrderRequest)(nil), "ProtobufBroker.CancelOrderRequest")
	proto.RegisterType((*CancelOrderResult)(nil), "ProtobufBroker.CancelOrderResult")
	proto.RegisterType((*ReplaceOrderRequest)(nil), "ProtobufBroker.ReplaceOrderRequest")
	proto.RegisterType((*ClosePositionRequest)(nil), "ProtobufBroker.ClosePositionRequest")
	proto.RegisterType((*SettlePositionRequest)(nil), "ProtobufBroker.SettlePositionRequest")
	proto.RegisterType((*SyncRequest)(nil), "ProtobufBroker.SyncRequest")
	proto.RegisterType((*BrokerRequest)(nil), "ProtobufBroker.BrokerRequest")
	proto.RegisterType((*OrdersUpdate)(nil), "ProtobufBroker.OrdersUpdate")
	proto.RegisterType((*TradesUpdate)(nil), "ProtobufBroker.TradesUpdate")
	proto.RegisterType((*PositionsUpdate)(nil), "ProtobufBroker.PositionsUpdate")
	proto.RegisterType((*BalancesUpdate)(nil), "ProtobufBroker.BalancesUpdate")
	proto.RegisterType((*RequestResolutionUpdate)(nil), "ProtobufBroker.RequestResolutionUpdate")
	proto.RegisterType((*AnonymousSessionStatusUpdate)(nil), "ProtobufBroker.AnonymousSessionStatusUpdate")
	proto.RegisterType((*SessionStatusUpdate)(nil), "ProtobufBroker.SessionStatusUpdate")
	proto.RegisterType((*PermissionsUpdate)(nil), "ProtobufBroker.PermissionsUpdate")
	proto.RegisterType((*PermissionsUpdate_Agreement)(nil), "ProtobufBroker.PermissionsUpdate.Agreement")
	proto.RegisterType((*PermissionsUpdate_LeverageLevels)(nil), "ProtobufBroker.PermissionsUpdate.LeverageLevels")
	proto.RegisterType((*APIAccessorStatusUpdate)(nil), "ProtobufBroker.APIAccessorStatusUpdate")
	proto.RegisterType((*BrokerUpdateMessage)(nil), "ProtobufBroker.BrokerUpdateMessage")
	proto.RegisterType((*Error)(nil), "ProtobufBroker.Error")
	proto.RegisterEnum("ProtobufBroker.Error_Kind", Error_Kind_name, Error_Kind_value)
}
func (m *BrokerSessionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrokerSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionConfig != nil {
		nn1, err := m.SessionConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.MarketId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.MarketId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrokerSessionMessage_Session_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Session != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Session.Size()))
		n2, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *BrokerSessionMessage_AnonymousTradingSession_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnonymousTradingSession != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.AnonymousTradingSession.Size()))
		n3, err := m.AnonymousTradingSession.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *BrokerSessionMessage_Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrokerSessionMessage_Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.Expires != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Expires))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.MfaToken) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.MfaToken)))
		i += copy(dAtA[i:], m.MfaToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrokerSessionMessage_AnonymousTradingSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrokerSessionMessage_AnonymousTradingSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exchange) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Exchange)))
		i += copy(dAtA[i:], m.Exchange)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlaceOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Order.Size()))
		n4, err := m.Order.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ClosingOrder != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ClosingOrder.Size()))
		n5, err := m.ClosingOrder.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlaceOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.Order != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Order.Size()))
		n6, err := m.Order.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CancelOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CancelOrderResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOrderResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReplaceOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.Replacement != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Replacement.Size()))
		n7, err := m.Replacement.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ReplacementClosingOrder != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ReplacementClosingOrder.Size()))
		n8, err := m.ReplacementClosingOrder.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClosePositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosePositionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.PositionId)))
		i += copy(dAtA[i:], m.PositionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SettlePositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettlePositionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.PositionId)))
		i += copy(dAtA[i:], m.PositionId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrokerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrokerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Request != nil {
		nn9, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.MarketId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.MarketId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrokerRequest_PlaceOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PlaceOrderRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.PlaceOrderRequest.Size()))
		n10, err := m.PlaceOrderRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *BrokerRequest_CancelOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CancelOrderRequest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.CancelOrderRequest.Size()))
		n11, err := m.CancelOrderRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *BrokerRequest_SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SyncRequest != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.SyncRequest.Size()))
		n12, err := m.SyncRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *BrokerRequest_ClosePositionRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClosePositionRequest != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ClosePositionRequest.Size()))
		n13, err := m.ClosePositionRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *BrokerRequest_ReplaceOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReplaceOrderRequest != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ReplaceOrderRequest.Size()))
		n14, err := m.ReplaceOrderRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *BrokerRequest_SettlePositionRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SettlePositionRequest != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.SettlePositionRequest.Size()))
		n15, err := m.SettlePositionRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *OrdersUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrdersUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TradesUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradesUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for _, msg := range m.Trades {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PositionsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, msg := range m.Positions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BalancesUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancesUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, msg := range m.Balances {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Total) > 0 {
		for _, msg := range m.Total {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestResolutionUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestResolutionUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Error))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Result != nil {
		nn16, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	if m.ErrorV2 != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ErrorV2.Size()))
		n17, err := m.ErrorV2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestResolutionUpdate_PlaceOrderResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PlaceOrderResult != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.PlaceOrderResult.Size()))
		n18, err := m.PlaceOrderResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *RequestResolutionUpdate_CancelOrderResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CancelOrderResult != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.CancelOrderResult.Size()))
		n19, err := m.CancelOrderResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *AnonymousSessionStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymousSessionStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Expiration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Expiration))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Initialized {
		dAtA[i] = 0x8
		i++
		if m.Initialized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Syncing {
		dAtA[i] = 0x10
		i++
		if m.Syncing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastSyncTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.LastSyncTime))
	}
	if m.SyncError != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.SyncError))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PermissionsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderTypes) > 0 {
		for _, num := range m.OrderTypes {
			dAtA[i] = 0x8
			i++
			i = encodeVarintBroker(dAtA, i, uint64(num))
		}
	}
	if len(m.FundingTypes) > 0 {
		for _, num := range m.FundingTypes {
			dAtA[i] = 0x10
			i++
			i = encodeVarintBroker(dAtA, i, uint64(num))
		}
	}
	if len(m.Agreements) > 0 {
		for _, msg := range m.Agreements {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LeverageLevels != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.LeverageLevels.Size()))
		n20, err := m.LeverageLevels.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.SupportsOrderExpiry {
		dAtA[i] = 0x38
		i++
		if m.SupportsOrderExpiry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PermissionsUpdate_Agreement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionsUpdate_Agreement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PermissionsUpdate_LeverageLevels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionsUpdate_LeverageLevels) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Buy) > 0 {
		for _, s := range m.Buy {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Sell) > 0 {
		for _, s := range m.Sell {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIAccessorStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIAccessorStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasAccess {
		dAtA[i] = 0x8
		i++
		if m.HasAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Status))
	}
	if len(m.StatusString) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.StatusString)))
		i += copy(dAtA[i:], m.StatusString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrokerUpdateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrokerUpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		nn21, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	if m.MarketId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.MarketId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrokerUpdateMessage_OrdersUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OrdersUpdate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.OrdersUpdate.Size()))
		n22, err := m.OrdersUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *BrokerUpdateMessage_TradesUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TradesUpdate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.TradesUpdate.Size()))
		n23, err := m.TradesUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *BrokerUpdateMessage_BalancesUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BalancesUpdate != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.BalancesUpdate.Size()))
		n24, err := m.BalancesUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *BrokerUpdateMessage_RequestResolutionUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RequestResolutionUpdate != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.RequestResolutionUpdate.Size()))
		n25, err := m.RequestResolutionUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *BrokerUpdateMessage_AnonymousSessionStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnonymousSessionStatusUpdate != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.AnonymousSessionStatusUpdate.Size()))
		n26, err := m.AnonymousSessionStatusUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *BrokerUpdateMessage_PermissionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PermissionsUpdate != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.PermissionsUpdate.Size()))
		n27, err := m.PermissionsUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *BrokerUpdateMessage_SessionStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionStatusUpdate != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.SessionStatusUpdate.Size()))
		n28, err := m.SessionStatusUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *BrokerUpdateMessage_PositionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PositionsUpdate != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.PositionsUpdate.Size()))
		n29, err := m.PositionsUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *BrokerUpdateMessage_ApiAccessorStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApiAccessorStatusUpdate != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ApiAccessorStatusUpdate.Size()))
		n30, err := m.ApiAccessorStatusUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *BrokerUpdateMessage_AuthenticationResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AuthenticationResult != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.AuthenticationResult.Size()))
		n31, err := m.AuthenticationResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *BrokerUpdateMessage_SubscriptionResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SubscriptionResult != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.SubscriptionResult.Size()))
		n32, err := m.SubscriptionResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *BrokerUpdateMessage_WebAuthenticationResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WebAuthenticationResult != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.WebAuthenticationResult.Size()))
		n33, err := m.WebAuthenticationResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Kind))
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBroker(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BrokerSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionConfig != nil {
		n += m.SessionConfig.Size()
	}
	if m.MarketId != 0 {
		n += 1 + sovBroker(uint64(m.MarketId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrokerSessionMessage_Session_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerSessionMessage_AnonymousTradingSession_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnonymousTradingSession != nil {
		l = m.AnonymousTradingSession.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerSessionMessage_Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovBroker(uint64(m.Expires))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.MfaToken)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrokerSessionMessage_AnonymousTradingSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exchange)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovBroker(uint64(m.Expiration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlaceOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.ClosingOrder != nil {
		l = m.ClosingOrder.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlaceOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplaceOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Replacement != nil {
		l = m.Replacement.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.ReplacementClosingOrder != nil {
		l = m.ReplacementClosingOrder.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClosePositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SettlePositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrokerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.MarketId != 0 {
		n += 1 + sovBroker(uint64(m.MarketId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrokerRequest_PlaceOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlaceOrderRequest != nil {
		l = m.PlaceOrderRequest.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerRequest_CancelOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelOrderRequest != nil {
		l = m.CancelOrderRequest.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerRequest_SyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncRequest != nil {
		l = m.SyncRequest.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerRequest_ClosePositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClosePositionRequest != nil {
		l = m.ClosePositionRequest.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerRequest_ReplaceOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplaceOrderRequest != nil {
		l = m.ReplaceOrderRequest.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerRequest_SettlePositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SettlePositionRequest != nil {
		l = m.SettlePositionRequest.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *OrdersUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TradesUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PositionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalancesUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestResolutionUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovBroker(uint64(m.Error))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	if m.ErrorV2 != nil {
		l = m.ErrorV2.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestResolutionUpdate_PlaceOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlaceOrderResult != nil {
		l = m.PlaceOrderResult.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *RequestResolutionUpdate_CancelOrderResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelOrderResult != nil {
		l = m.CancelOrderResult.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *AnonymousSessionStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiration != 0 {
		n += 1 + sovBroker(uint64(m.Expiration))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Initialized {
		n += 2
	}
	if m.Syncing {
		n += 2
	}
	if m.LastSyncTime != 0 {
		n += 1 + sovBroker(uint64(m.LastSyncTime))
	}
	if m.SyncError != 0 {
		n += 1 + sovBroker(uint64(m.SyncError))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PermissionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderTypes) > 0 {
		for _, e := range m.OrderTypes {
			n += 1 + sovBroker(uint64(e))
		}
	}
	if len(m.FundingTypes) > 0 {
		for _, e := range m.FundingTypes {
			n += 1 + sovBroker(uint64(e))
		}
	}
	if len(m.Agreements) > 0 {
		for _, e := range m.Agreements {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.LeverageLevels != nil {
		l = m.LeverageLevels.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.SupportsOrderExpiry {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PermissionsUpdate_Agreement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PermissionsUpdate_LeverageLevels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buy) > 0 {
		for _, s := range m.Buy {
			l = len(s)
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if len(m.Sell) > 0 {
		for _, s := range m.Sell {
			l = len(s)
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIAccessorStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasAccess {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovBroker(uint64(m.Status))
	}
	l = len(m.StatusString)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrokerUpdateMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update != nil {
		n += m.Update.Size()
	}
	if m.MarketId != 0 {
		n += 1 + sovBroker(uint64(m.MarketId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrokerUpdateMessage_OrdersUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrdersUpdate != nil {
		l = m.OrdersUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_TradesUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradesUpdate != nil {
		l = m.TradesUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_BalancesUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesUpdate != nil {
		l = m.BalancesUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_RequestResolutionUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestResolutionUpdate != nil {
		l = m.RequestResolutionUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_AnonymousSessionStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnonymousSessionStatusUpdate != nil {
		l = m.AnonymousSessionStatusUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_PermissionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PermissionsUpdate != nil {
		l = m.PermissionsUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_SessionStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionStatusUpdate != nil {
		l = m.SessionStatusUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_PositionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionsUpdate != nil {
		l = m.PositionsUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_ApiAccessorStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiAccessorStatusUpdate != nil {
		l = m.ApiAccessorStatusUpdate.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_AuthenticationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthenticationResult != nil {
		l = m.AuthenticationResult.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_SubscriptionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionResult != nil {
		l = m.SubscriptionResult.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *BrokerUpdateMessage_WebAuthenticationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebAuthenticationResult != nil {
		l = m.WebAuthenticationResult.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovBroker(uint64(m.Kind))
	}
	if m.Code != 0 {
		n += 1 + sovBroker(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBroker(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBroker(x uint64) (n int) {
	return sovBroker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BrokerSessionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerSessionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerSessionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BrokerSessionMessage_Session{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SessionConfig = &BrokerSessionMessage_Session_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonymousTradingSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BrokerSessionMessage_AnonymousTradingSession{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SessionConfig = &BrokerSessionMessage_AnonymousTradingSession_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerSessionMessage_Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MfaToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MfaToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerSessionMessage_AnonymousTradingSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousTradingSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousTradingSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &PrivateOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClosingOrder == nil {
				m.ClosingOrder = &PrivateOrder{}
			}
			if err := m.ClosingOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &PrivateOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOrderResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOrderResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOrderResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replacement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replacement == nil {
				m.Replacement = &PrivateOrder{}
			}
			if err := m.Replacement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacementClosingOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplacementClosingOrder == nil {
				m.ReplacementClosingOrder = &PrivateOrder{}
			}
			if err := m.ReplacementClosingOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosePositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosePositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosePositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettlePositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettlePositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettlePositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceOrderRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlaceOrderRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &BrokerRequest_PlaceOrderRequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOrderRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelOrderRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &BrokerRequest_CancelOrderRequest{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &BrokerRequest_SyncRequest{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosePositionRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClosePositionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &BrokerRequest_ClosePositionRequest{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceOrderRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReplaceOrderRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &BrokerRequest_ReplaceOrderRequest{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlePositionRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SettlePositionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &BrokerRequest_SettlePositionRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrdersUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrdersUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrdersUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &PrivateOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradesUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradesUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradesUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &PrivateTrade{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, &PrivatePosition{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancesUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancesUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancesUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &Balances{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, &Balances{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestResolutionUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestResolutionUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestResolutionUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceOrderResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlaceOrderResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &RequestResolutionUpdate_PlaceOrderResult{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelOrderResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelOrderResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &RequestResolutionUpdate_CancelOrderResult{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorV2 == nil {
				m.ErrorV2 = &Error{}
			}
			if err := m.ErrorV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymousSessionStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousSessionStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousSessionStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initialized = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syncing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Syncing = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSyncTime", wireType)
			}
			m.LastSyncTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSyncTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncError", wireType)
			}
			m.SyncError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncError |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v PrivateOrder_Type
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBroker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (PrivateOrder_Type(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OrderTypes = append(m.OrderTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBroker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBroker
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.OrderTypes) == 0 {
					m.OrderTypes = make([]PrivateOrder_Type, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PrivateOrder_Type
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBroker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (PrivateOrder_Type(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OrderTypes = append(m.OrderTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderTypes", wireType)
			}
		case 2:
			if wireType == 0 {
				var v FundingType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBroker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (FundingType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FundingTypes = append(m.FundingTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBroker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBroker
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FundingTypes) == 0 {
					m.FundingTypes = make([]FundingType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FundingType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBroker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (FundingType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FundingTypes = append(m.FundingTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingTypes", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agreements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agreements = append(m.Agreements, &PermissionsUpdate_Agreement{})
			if err := m.Agreements[len(m.Agreements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeverageLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeverageLevels == nil {
				m.LeverageLevels = &PermissionsUpdate_LeverageLevels{}
			}
			if err := m.LeverageLevels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsOrderExpiry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsOrderExpiry = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionsUpdate_Agreement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agreement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agreement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionsUpdate_LeverageLevels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeverageLevels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeverageLevels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buy = append(m.Buy, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sell = append(m.Sell, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIAccessorStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIAccessorStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIAccessorStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAccess = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerUpdateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerUpdateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerUpdateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrdersUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_OrdersUpdate{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradesUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TradesUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_TradesUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BalancesUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_BalancesUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestResolutionUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestResolutionUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_RequestResolutionUpdate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonymousSessionStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymousSessionStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_AnonymousSessionStatusUpdate{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PermissionsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_PermissionsUpdate{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_SessionStatusUpdate{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PositionsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_PositionsUpdate{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiAccessorStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIAccessorStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_ApiAccessorStatusUpdate{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &stream.AuthenticationResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_AuthenticationResult{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &stream.SubscriptionResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_SubscriptionResult{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebAuthenticationResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &client.WebAuthenticationResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &BrokerUpdateMessage_WebAuthenticationResult{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (Error_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &types.Any{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBroker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBroker
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBroker
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBroker(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBroker = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBroker   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("public/broker/broker.proto", fileDescriptor_broker_15be0079423cc074) }

var fileDescriptor_broker_15be0079423cc074 = []byte{
	// 1655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x5b, 0x6f, 0xdb, 0x46,
	0x16, 0xd6, 0xd5, 0x92, 0x8e, 0x6c, 0x85, 0x1e, 0xdb, 0x31, 0xa3, 0x18, 0x5e, 0x87, 0xbb, 0x8b,
	0x0d, 0xb0, 0xbb, 0x72, 0xd6, 0x5b, 0xa4, 0x2f, 0xbd, 0x49, 0xb6, 0x5a, 0xa9, 0x76, 0x64, 0x65,
	0x24, 0xc7, 0x45, 0x81, 0x22, 0xa5, 0xa8, 0xb1, 0x42, 0x98, 0x22, 0x59, 0x0e, 0xe5, 0x44, 0xfd,
	0x07, 0x7d, 0xee, 0x4b, 0xff, 0x49, 0xff, 0x40, 0x81, 0x16, 0xe8, 0x4b, 0xdf, 0xfb, 0x52, 0x24,
	0xff, 0xa3, 0x28, 0xe6, 0x42, 0x99, 0x37, 0xd9, 0x69, 0x9f, 0xc8, 0x33, 0x73, 0xbe, 0x6f, 0xce,
	0xcc, 0x9c, 0x1b, 0x09, 0x75, 0x77, 0x36, 0xb2, 0x4c, 0x63, 0x7f, 0xe4, 0x39, 0x97, 0xc4, 0x93,
	0x8f, 0x86, 0xeb, 0x39, 0xbe, 0x83, 0x6a, 0x7d, 0xf6, 0x18, 0xcd, 0x2e, 0x5a, 0x7c, 0xb4, 0x1e,
	0xe8, 0x1a, 0x96, 0x49, 0x6c, 0x5f, 0x3e, 0x84, 0x6e, 0xfd, 0x7e, 0x94, 0xc7, 0xf5, 0xcc, 0x2b,
	0xdd, 0x27, 0x72, 0x32, 0x00, 0x52, 0xdf, 0x23, 0xfa, 0x54, 0x3e, 0xe4, 0xdc, 0xbd, 0x89, 0xe3,
	0x4c, 0x2c, 0xb2, 0xef, 0xca, 0xb5, 0xf6, 0x75, 0x7b, 0x2e, 0xa6, 0xb4, 0x37, 0x79, 0xd8, 0x14,
	0x4b, 0x0f, 0x08, 0xa5, 0xa6, 0x63, 0x3f, 0x21, 0x94, 0xea, 0x13, 0x82, 0x3a, 0x50, 0xa2, 0x62,
	0x44, 0xcd, 0xee, 0x65, 0x1f, 0x56, 0x0f, 0xfe, 0xd3, 0x88, 0x9a, 0xda, 0x48, 0x83, 0x35, 0xa4,
	0xd8, 0xc9, 0xe0, 0x00, 0x8e, 0x5e, 0xc1, 0xb6, 0x6e, 0x3b, 0xf6, 0x7c, 0xea, 0xcc, 0xe8, 0xd0,
	0xd3, 0xc7, 0xa6, 0x3d, 0x91, 0x5a, 0x6a, 0x8e, 0x33, 0xbf, 0xf7, 0x56, 0xcc, 0xcd, 0x74, 0x8e,
	0x4e, 0x06, 0x2f, 0xa3, 0x47, 0x75, 0x28, 0x4f, 0x75, 0xef, 0x92, 0xf8, 0xdd, 0xb1, 0x9a, 0xdf,
	0xcb, 0x3e, 0xcc, 0xe3, 0x85, 0x5c, 0x9f, 0x42, 0x29, 0x50, 0xbb, 0x0b, 0x2b, 0x33, 0x4a, 0xbc,
	0xee, 0x98, 0xef, 0xb4, 0x82, 0xa5, 0x84, 0x54, 0x28, 0x91, 0x57, 0xae, 0xe9, 0x11, 0xca, 0x0d,
	0xcd, 0xe3, 0x40, 0x44, 0x9b, 0x50, 0xf4, 0x9d, 0x4b, 0x62, 0x73, 0xd6, 0x0a, 0x16, 0x02, 0x5f,
	0xee, 0x42, 0x1f, 0xf2, 0x89, 0x02, 0x9f, 0x58, 0xc8, 0xf5, 0x4b, 0xd8, 0x6e, 0x2e, 0xb7, 0x92,
	0xbc, 0x32, 0x5e, 0xe8, 0xf6, 0x84, 0x48, 0x03, 0x16, 0xf2, 0xf5, 0x42, 0xb9, 0xf0, 0x42, 0xbb,
	0x00, 0xdc, 0x12, 0xdd, 0x67, 0x87, 0x28, 0x76, 0x16, 0x1a, 0x69, 0xdd, 0x81, 0x35, 0x49, 0x7e,
	0xe8, 0xd8, 0x17, 0xe6, 0x44, 0xfb, 0x26, 0x0b, 0xeb, 0x7d, 0x4b, 0x37, 0xc8, 0xa9, 0x37, 0x26,
	0x1e, 0x26, 0x5f, 0xcd, 0x08, 0xf5, 0xd1, 0x01, 0x14, 0x1d, 0x26, 0xcb, 0x6b, 0xd8, 0x89, 0x5f,
	0x43, 0x5f, 0x38, 0x98, 0xc0, 0x08, 0x55, 0xf4, 0x11, 0xac, 0x1a, 0x96, 0x43, 0x4d, 0x7b, 0xc2,
	0x87, 0xf9, 0xe2, 0xb7, 0x41, 0x23, 0x08, 0xed, 0x4b, 0x50, 0xc2, 0xa6, 0xd0, 0x99, 0xe5, 0xb3,
	0x93, 0xe6, 0xf4, 0x8b, 0x2b, 0x08, 0xc4, 0xbf, 0x62, 0xa3, 0xd6, 0x00, 0x74, 0xa8, 0xdb, 0x06,
	0xb1, 0x22, 0xbb, 0x0d, 0xad, 0x91, 0x8b, 0xac, 0xa1, 0xfd, 0x17, 0xd6, 0x23, 0xfa, 0x37, 0x9b,
	0xa4, 0xfd, 0x98, 0x85, 0x0d, 0x4c, 0xdc, 0xc4, 0x71, 0x2e, 0xdf, 0xc4, 0x07, 0x50, 0xf5, 0x04,
	0x60, 0x4a, 0x6c, 0xff, 0xad, 0xb6, 0x12, 0x06, 0xa0, 0x67, 0xb0, 0x1d, 0x12, 0x0f, 0xff, 0xec,
	0xf9, 0x2f, 0x03, 0x6b, 0x8f, 0x61, 0x93, 0xc9, 0xa4, 0xef, 0x50, 0x93, 0x39, 0x4e, 0xb0, 0x93,
	0x5d, 0x00, 0x57, 0x0e, 0x2d, 0x4e, 0x2b, 0x34, 0xa2, 0xbd, 0x0b, 0x5b, 0x03, 0xe2, 0xfb, 0xd6,
	0x2d, 0xc0, 0x6c, 0x02, 0xb8, 0x06, 0xd5, 0xc1, 0xdc, 0x36, 0xa4, 0xba, 0xf6, 0x43, 0x01, 0xd6,
	0x84, 0xc1, 0x01, 0x41, 0x0d, 0x72, 0x66, 0x00, 0xcc, 0x99, 0x63, 0xf4, 0x14, 0xd6, 0x13, 0x07,
	0x2d, 0xcf, 0xef, 0x41, 0x62, 0xcf, 0x71, 0xc5, 0x4e, 0x06, 0x27, 0xd1, 0x68, 0x08, 0xc8, 0x48,
	0x78, 0x87, 0x3c, 0x47, 0x2d, 0xce, 0x99, 0xf4, 0xa3, 0x4e, 0x06, 0xa7, 0xe0, 0xd1, 0x87, 0x50,
	0xa5, 0xd7, 0x3b, 0xe3, 0xe1, 0x5f, 0x3d, 0xb8, 0x1f, 0xa7, 0x0b, 0x6d, 0xbe, 0x93, 0xc1, 0x61,
	0x04, 0xfa, 0x1c, 0x36, 0x8d, 0x94, 0xbb, 0x50, 0x8b, 0x9c, 0xe9, 0x1f, 0x09, 0xc3, 0x52, 0x74,
	0x3b, 0x19, 0x9c, 0xca, 0x81, 0xce, 0x61, 0xc3, 0x4b, 0x3a, 0xac, 0xba, 0xc2, 0xa9, 0xff, 0x1e,
	0xa7, 0x4e, 0xf1, 0xed, 0x4e, 0x06, 0xa7, 0x31, 0x44, 0x12, 0x6c, 0x29, 0x9a, 0x60, 0xd1, 0x17,
	0xb0, 0x45, 0xd3, 0x9c, 0x44, 0xad, 0xf0, 0x65, 0xff, 0x99, 0x38, 0x9b, 0x34, 0xe5, 0x4e, 0x06,
	0xa7, 0xb3, 0xb4, 0x2a, 0x50, 0x0a, 0xdc, 0xe8, 0x08, 0x56, 0xb9, 0x55, 0xf4, 0xcc, 0x1d, 0xeb,
	0x3e, 0x41, 0xef, 0xc0, 0x0a, 0x8f, 0x3c, 0xaa, 0x66, 0xf7, 0xf2, 0xb7, 0x46, 0x87, 0xd4, 0x65,
	0x2c, 0x2c, 0x31, 0x93, 0x10, 0x8b, 0xcf, 0xe5, 0x5b, 0x58, 0x38, 0x08, 0x4b, 0x5d, 0xad, 0x0f,
	0x77, 0x02, 0x4b, 0x03, 0xa2, 0xf7, 0xa1, 0x12, 0x84, 0x40, 0xc0, 0xf5, 0xb7, 0x25, 0x5c, 0x8b,
	0x4d, 0x5e, 0x23, 0xb4, 0x2b, 0xa8, 0xb5, 0x74, 0x8b, 0x79, 0xdc, 0xb5, 0x65, 0xe5, 0x91, 0x1c,
	0x91, 0x7c, 0x6a, 0xa2, 0x82, 0xca, 0x79, 0xbc, 0xd0, 0x44, 0x0d, 0x56, 0x4a, 0x7c, 0xdd, 0x52,
	0x73, 0xb7, 0x40, 0x84, 0x9a, 0xf6, 0x7d, 0x0e, 0xb6, 0xe5, 0x09, 0x63, 0x42, 0x1d, 0x6b, 0xc6,
	0xcc, 0x91, 0x16, 0xc4, 0xc3, 0x74, 0x13, 0x8a, 0xc4, 0xf3, 0x1c, 0x91, 0xa5, 0x8b, 0x58, 0x08,
	0x2c, 0x21, 0x4e, 0x45, 0xf1, 0x96, 0x75, 0x32, 0x10, 0x51, 0x0f, 0x14, 0x37, 0x56, 0x03, 0x64,
	0xc8, 0xec, 0xdd, 0x14, 0xd5, 0x4c, 0xaf, 0x93, 0xc1, 0x09, 0x2c, 0x4b, 0x13, 0x46, 0x3c, 0x83,
	0xcb, 0xc8, 0x79, 0x70, 0x63, 0x48, 0x4b, 0xc6, 0x24, 0x1a, 0xed, 0x43, 0x89, 0xef, 0xe2, 0xd9,
	0x81, 0x8c, 0x93, 0xad, 0x38, 0x51, 0x9b, 0x4d, 0xe3, 0x40, 0xab, 0x55, 0x86, 0x15, 0x01, 0xd5,
	0x86, 0xb0, 0xb3, 0xa8, 0xf5, 0xb2, 0x0e, 0x0f, 0x7c, 0xdd, 0x9f, 0x05, 0xf7, 0x17, 0x2d, 0xdf,
	0xd9, 0x78, 0xf9, 0x4e, 0x2f, 0xfa, 0xda, 0xb7, 0x59, 0xd8, 0x48, 0x63, 0xdb, 0x83, 0xaa, 0x69,
	0x9b, 0xbe, 0xa9, 0x5b, 0xe6, 0xd7, 0x44, 0x5c, 0x4a, 0x19, 0x87, 0x87, 0xd8, 0x3d, 0xb0, 0x4c,
	0x63, 0xda, 0x13, 0xce, 0x58, 0xc6, 0x81, 0x88, 0x34, 0x58, 0xb5, 0x74, 0xea, 0xb3, 0xb4, 0x34,
	0x34, 0xa7, 0x44, 0xb6, 0x12, 0x91, 0x31, 0xb4, 0x03, 0x15, 0xa6, 0xce, 0x77, 0xcb, 0x2f, 0xa9,
	0x88, 0xaf, 0x07, 0xb4, 0xdf, 0xf3, 0xb0, 0xde, 0x27, 0xde, 0xd4, 0xe4, 0x86, 0x05, 0x36, 0xb5,
	0x01, 0x78, 0x54, 0x0d, 0xe7, 0xae, 0xf4, 0xd1, 0x5a, 0x4a, 0xbe, 0x0e, 0x45, 0x61, 0x83, 0x69,
	0xb6, 0x72, 0x4a, 0x06, 0x87, 0x80, 0xe8, 0x10, 0x56, 0x2f, 0x66, 0x36, 0xeb, 0x95, 0x04, 0x51,
	0x8e, 0x13, 0x25, 0xb2, 0xea, 0xc7, 0xd7, 0x3a, 0x9c, 0x22, 0x02, 0x42, 0xc7, 0x00, 0xfa, 0xc4,
	0x23, 0xbc, 0xfa, 0x51, 0xb5, 0xc0, 0x9d, 0xff, 0xdf, 0x09, 0x5b, 0xe2, 0x5b, 0x68, 0x34, 0x03,
	0x0c, 0x0e, 0xc1, 0xd1, 0x67, 0x50, 0xb3, 0xc8, 0x15, 0xf1, 0xf4, 0x09, 0x39, 0x21, 0x57, 0xc4,
	0xa2, 0xd2, 0x39, 0x1e, 0xdd, 0x4e, 0x78, 0x12, 0xc1, 0xe1, 0x18, 0x0f, 0x7a, 0x04, 0x1b, 0x74,
	0xe6, 0xba, 0x8e, 0xe7, 0x53, 0x7e, 0x22, 0x6d, 0xe6, 0x0f, 0x73, 0x9e, 0x55, 0xcb, 0x38, 0x6d,
	0xaa, 0xfe, 0x3f, 0xa8, 0x2c, 0x8c, 0x44, 0x0a, 0xe4, 0x2f, 0xc9, 0x5c, 0x86, 0x24, 0x7b, 0x45,
	0x08, 0x0a, 0x23, 0x67, 0x3c, 0x97, 0x4e, 0xc4, 0xdf, 0xeb, 0x8f, 0xa1, 0x16, 0x35, 0x83, 0xe1,
	0x46, 0xb3, 0x39, 0xbf, 0xa2, 0x0a, 0x66, 0xaf, 0x0c, 0x47, 0x89, 0x25, 0xd2, 0x44, 0x05, 0xf3,
	0xf7, 0x4f, 0x0b, 0xe5, 0xa2, 0xb2, 0x82, 0x37, 0x8c, 0x99, 0xe7, 0x11, 0xdb, 0x98, 0xf7, 0x75,
	0xd3, 0x6b, 0x5a, 0x96, 0xf3, 0x92, 0x8c, 0x35, 0x0a, 0xdb, 0xcd, 0x7e, 0xb7, 0x69, 0x18, 0x84,
	0x52, 0xc7, 0x8b, 0x78, 0xe6, 0x0e, 0x54, 0x5e, 0xe8, 0x54, 0x4c, 0x49, 0xbf, 0xbc, 0x1e, 0x60,
	0x5d, 0x37, 0xe5, 0xda, 0x32, 0x69, 0x48, 0x89, 0xf9, 0xa4, 0x78, 0x1b, 0xf8, 0x1e, 0x73, 0x59,
	0x91, 0x3a, 0x22, 0x63, 0xda, 0xaf, 0x65, 0xd8, 0x10, 0x07, 0x2d, 0x96, 0x0a, 0x3e, 0x5a, 0x5a,
	0xb0, 0xea, 0x84, 0x2a, 0x81, 0xfc, 0x72, 0x49, 0x64, 0xee, 0x70, 0xb5, 0xe8, 0x64, 0x70, 0x04,
	0xc3, 0x38, 0xfc, 0x50, 0x1d, 0x58, 0xd6, 0xad, 0x85, 0x6b, 0x05, 0xe3, 0x08, 0x63, 0x50, 0x07,
	0x6a, 0xa3, 0x48, 0xce, 0x96, 0xfd, 0xc5, 0xee, 0xb2, 0xa4, 0xbb, 0xe0, 0x89, 0xe1, 0x90, 0xc1,
	0x5a, 0xbf, 0xd4, 0x24, 0x2c, 0x13, 0xe6, 0xbf, 0x92, 0xe5, 0x3b, 0x55, 0x9d, 0x7d, 0x27, 0x2d,
	0x61, 0x42, 0x1e, 0xec, 0xe8, 0x37, 0x24, 0x2c, 0x99, 0x49, 0x13, 0x1f, 0x80, 0x37, 0x25, 0xb9,
	0x4e, 0x06, 0xdf, 0xc8, 0xc9, 0x3b, 0xbb, 0x78, 0x8c, 0xc8, 0x60, 0x7a, 0x70, 0x6b, 0x30, 0xf1,
	0xce, 0x2e, 0x91, 0x75, 0xce, 0x61, 0x83, 0xa6, 0x58, 0x5f, 0x4a, 0x6f, 0x73, 0xd2, 0x8d, 0x4e,
	0x63, 0x40, 0xc7, 0x70, 0xc7, 0x8d, 0x16, 0x75, 0xb5, 0xcc, 0x49, 0x93, 0x75, 0x3c, 0xaa, 0xd6,
	0xc9, 0xe0, 0x38, 0x92, 0xdd, 0xa8, 0xee, 0x9a, 0x69, 0x01, 0x23, 0x3b, 0xa3, 0xc4, 0x8d, 0x2e,
	0x89, 0x2f, 0xfe, 0xe5, 0x9b, 0xce, 0xc4, 0xba, 0x49, 0x7d, 0xe6, 0xbf, 0x20, 0xb6, 0x6f, 0x1a,
	0xba, 0x68, 0x9b, 0x78, 0x4d, 0x84, 0x58, 0x37, 0x39, 0x10, 0xbf, 0x09, 0x9a, 0x29, 0xba, 0xac,
	0x9b, 0x4c, 0xe3, 0x88, 0x34, 0x7d, 0xd5, 0x58, 0xd3, 0x37, 0x04, 0x44, 0x67, 0x23, 0x6a, 0x78,
	0xa6, 0x1b, 0x5a, 0x75, 0x35, 0xd6, 0x5c, 0xcb, 0x55, 0x07, 0x09, 0x4d, 0xd6, 0x5c, 0x27, 0xf1,
	0xec, 0xc8, 0x5e, 0x92, 0x51, 0x9a, 0x91, 0x6a, 0x2d, 0x76, 0x64, 0x87, 0xe2, 0x87, 0xc9, 0x79,
	0xba, 0x3a, 0x3b, 0xb2, 0x25, 0x4c, 0xac, 0x7e, 0x8b, 0xc3, 0xd3, 0xde, 0xe4, 0xa0, 0xc8, 0xab,
	0x1b, 0x6a, 0x40, 0xe1, 0xd2, 0xb4, 0x45, 0x51, 0xad, 0x1d, 0xd4, 0x53, 0x3b, 0x80, 0xc6, 0xb1,
	0x69, 0x8f, 0x31, 0xd7, 0x63, 0xb9, 0xd3, 0x70, 0xc6, 0x22, 0x67, 0x14, 0x30, 0x7f, 0x0f, 0x77,
	0x41, 0x85, 0x68, 0x17, 0xd4, 0x80, 0xd2, 0x98, 0xf8, 0xba, 0x69, 0x51, 0xb5, 0xc8, 0xcb, 0xd2,
	0x66, 0x43, 0xfc, 0xa8, 0x69, 0x04, 0x3f, 0x6a, 0x1a, 0x4d, 0x7b, 0x8e, 0x03, 0x25, 0xed, 0xe7,
	0x2c, 0x14, 0xd8, 0x62, 0x48, 0x81, 0xd5, 0xe3, 0x6e, 0xef, 0xe8, 0xf9, 0x59, 0xef, 0xb8, 0x77,
	0x7a, 0xde, 0x53, 0x32, 0x68, 0x1d, 0xd6, 0xf8, 0x48, 0xb7, 0x37, 0x6c, 0xe3, 0x5e, 0xf3, 0x44,
	0xc9, 0x22, 0x04, 0x35, 0x3e, 0x34, 0xc4, 0xcd, 0xde, 0xa0, 0xdb, 0xee, 0x0d, 0x95, 0xdc, 0x02,
	0xd8, 0x6c, 0x9d, 0xe2, 0x61, 0xfb, 0x48, 0xc9, 0xa3, 0x2a, 0x94, 0x04, 0xf0, 0x54, 0x29, 0xa0,
	0x3a, 0xdc, 0xe5, 0x42, 0xbf, 0x8d, 0x9f, 0x74, 0x07, 0x83, 0xee, 0x69, 0xef, 0xf9, 0x51, 0xbb,
	0xd7, 0x6d, 0x1f, 0x29, 0xc5, 0xc5, 0x5c, 0xb7, 0xf7, 0xac, 0x79, 0xd2, 0x3d, 0x7a, 0x7e, 0xda,
	0x6f, 0xe3, 0xe6, 0xb0, 0x7b, 0xda, 0x53, 0x56, 0xd0, 0x3d, 0xd8, 0x8a, 0xcc, 0x35, 0xf1, 0x27,
	0x67, 0x4f, 0xd8, 0x8a, 0x25, 0xa4, 0xc2, 0x66, 0x64, 0x0a, 0xb7, 0x9f, 0x9e, 0xb5, 0x07, 0x43,
	0xa5, 0xdc, 0x52, 0x7e, 0x7a, 0xbd, 0x9b, 0xfd, 0xe5, 0xf5, 0x6e, 0xf6, 0xb7, 0xd7, 0xbb, 0xd9,
	0xef, 0xde, 0xec, 0x66, 0x46, 0x2b, 0x7c, 0xdb, 0xff, 0xff, 0x23, 0x00, 0x00, 0xff, 0xff, 0x9d,
	0x1f, 0x10, 0x6b, 0x30, 0x13, 0x00, 0x00,
}
